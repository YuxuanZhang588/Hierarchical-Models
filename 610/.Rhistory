group = rep(1:m, each = n))
for (j in 1:m) {
x_i_j <- rnorm(n)
Sigma <- matrix(c(psi0_2, psi01, psi01, psi1_2), nrow = 2)
random_effects <- MASS::mvrnorm(1, mu = c(0, 0), Sigma = Sigma)
a_0_j <- random_effects[1]
a_1_j <- random_effects[2]
for (i in 1:n) {
epsilon_i_j <- rnorm(1, 0, sqrt(sigma2))
y_i_j <- beta_0 + beta_1 * x_i_j[i] + beta_2 * w_j[j] + a_0_j + a_1_j * x_i_j[i] + epsilon_i_j
row_index <- (j - 1) * n + i
data$y[row_index] <- y_i_j
data$x[row_index] <- x_i_j[i]
data$w[row_index] <- w_j[j]
}
}
full_model <- lmer(y ~ x + w + (1 + x | group), data = data, REML = FALSE)
restricted_model <- lmer(y ~ x + w + (1 | group), data = data, REML = FALSE)
lrt <- 2 * (logLik(full_model) - logLik(restricted_model))
lrt_statistics[sim] <- as.numeric(lrt)
p_value <- 0.5 * pchisq(as.numeric(lrt), df = 1, lower.tail = FALSE) +
0.5 * pchisq(as.numeric(lrt), df = 2, lower.tail = FALSE)
p_values[sim] <- p_value
}
lrt_values <- seq(0, 10, length.out = 1000)
pdf_mixture <- 0.5 * dchisq(lrt_values, df = 1) + 0.5 * dchisq(lrt_values, df = 2)
data <- data.frame(LRT = lrt_values, Density = pdf_mixture)
mpar()
hist(lrt_statistics, col="lightblue", prob=TRUE, xlab="lambda", nclass=15)
xs <- seq(0, 10, length=100)
lines(xs, 0.5 * dchisq(xs, df=1) + 0.5 * dchisq(xs, df=2), col="red")
data = dget("C:/Users/david/OneDrive - Duke University/610/Data/Earthquake.txt")
data = dget("C:/Users/LEGION/OneDrive - Duke University/610/Data/Earthquake.txt")
hlm_model <- lmer(accel ~ Richter + distance + soil + (distance + soil | Quake), REML = F, data = data)
summary(hlm_model)
residuals = residuals(hlm_model)
fitted_values = fitted(hlm_model)
qqplot <- ggplot(data.frame(residuals = residuals), aes(sample = residuals)) +
stat_qq() +
stat_qq_line() +
ggtitle("Q-Q Plot of Residuals") +
theme_minimal()
print(qqplot)
library(ggplot2)
ggplot(data, aes(x = distance, y = accel)) +
geom_point() +
ggtitle("Scatter Plot of accel vs distance") +
xlab("Distance from Epicenter") +
ylab("Vertical Acceleration") +
theme_minimal()
# Log-log transformation on both variables pooled across groups
ggplot(data, aes(x = log(distance), y = log(accel))) +
geom_point() +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
ggtitle("Log-Log Scatter Plot of log(accel) vs log(distance) (Pooled Across Groups)") +
xlab("Log of Distance") +
ylab("Log of Vertical Acceleration") +
theme_minimal()
hlm_log_log <- lmer(log(accel) ~ log(distance) + Richter + soil + (log(distance) + soil | Quake), data = data)
summary(hlm_log_log)
residuals = residuals(hlm_log_log)
fitted_values = fitted(hlm_log_log)
qqplot <- ggplot(data.frame(residuals = residuals), aes(sample = residuals)) +
stat_qq() +
stat_qq_line() +
ggtitle("Q-Q Plot of Residuals") +
theme_minimal()
print(qqplot)
library(lme4)
fit_full <- lmer(log_accel ~ log_distance + soil + Richter +
(log_distance + soil | Quake), data = earthquake_data, REML = FALSE)
library(lme4)
fit_full <- lmer(log_accel ~ log_distance + soil + Richter +
(log_distance + soil | Quake), data = data, REML = FALSE)
library(lme4)
fit_full <- lmer(log(accel) ~ log(distance) + soil + Richter +
(log(distance) + soil | Quake), data = data, REML = FALSE)
# Test for Random Slope of Soil
fit_no_soil_slope <- lmer(log(accel) ~ log(distance) + soil + Richter +
(log(distance) | Quake), data = data, REML = FALSE)
LRT_soil <- 2 * (logLik(fit_full) - logLik(fit_no_soil_slope))
LRT_soil_value <- as.numeric(LRT_soil)
p_value_soil <- 0.5 * (1 - pchisq(LRT_soil_value, df = 2)) +
0.5 * (1 - pchisq(LRT_soil_value, df = 3))
cat("LRT Statistic for Random Slope of Soil:", LRT_soil_value, "\n")
cat("p-value for Random Slope of Soil:", p_value_soil, "\n")
# Test for Random Slope of log_distance
fit_no_distance_slope <- lmer(log_accel ~ log_distance + soil + Richter +
(soil | Quake), data = earthquake_data, REML = FALSE)
data$log_accel <- log(data$accel)
library(lme4)
data$log_accel <- log(data$accel)
data$log_distance <- log(data$distance)
fit_full <- lmer(log_accel ~ log_distance + soil + Richter +
(log_distance + soil | Quake), data = data, REML = FALSE)
# Test for Random Slope of Soil
fit_no_soil_slope <- lmer(log_accel ~ log_distance + soil + Richter +
(log_distance | Quake), data = data, REML = FALSE)
LRT_soil <- 2 * (logLik(fit_full) - logLik(fit_no_soil_slope))
LRT_soil_value <- as.numeric(LRT_soil)
p_value_soil <- 0.5 * (1 - pchisq(LRT_soil_value, df = 2)) +
0.5 * (1 - pchisq(LRT_soil_value, df = 3))
cat("LRT Statistic for Random Slope of Soil:", LRT_soil_value, "\n")
cat("p-value for Random Slope of Soil:", p_value_soil, "\n")
# Test for Random Slope of log_distance
fit_no_distance_slope <- lmer(log_accel ~ log_distance + soil + Richter +
(soil | Quake), data = data, REML = FALSE)
LRT_distance <- 2 * (logLik(fit_full) - logLik(fit_no_distance_slope))
LRT_distance_value <- as.numeric(LRT_distance)
p_value_distance <- 0.5 * (1 - pchisq(LRT_distance_value, df = 2)) +
0.5 * (1 - pchisq(LRT_distance_value, df = 3))
cat("LRT Statistic for Random Slope of log_distance:", LRT_distance_value, "\n")
cat("p-value for Random Slope of log_distance:", p_value_distance, "\n")
# Test for Fixed Effect of Soil
fit_no_soil_fixed <- lmer(log_accel ~ log_distance + Richter +
(log_distance + soil | Quake), data = data, REML = FALSE)
LRT_soil_fixed <- 2 * (logLik(fit_full) - logLik(fit_no_soil_fixed))
LRT_soil_fixed_value <- as.numeric(LRT_soil_fixed)
p_value_soil_fixed <- 1 - pchisq(LRT_soil_fixed_value, df = 1)
cat("LRT Statistic for Fixed Effect of Soil:", LRT_soil_fixed_value, "\n")
cat("p-value for Fixed Effect of Soil:", p_value_soil_fixed, "\n")
# Test for Fixed Effect of log_distance
fit_no_distance_fixed <- lmer(log_accel ~ soil + Richter +
(log_distance + soil | Quake), data = earthquake_data, REML = FALSE)
library(lme4)
data$log_accel <- log(data$accel)
data$log_distance <- log(data$distance)
fit_full <- lmer(log_accel ~ log_distance + soil + Richter +
(log_distance + soil | Quake), data = data, REML = FALSE)
# Test for Random Slope of Soil
fit_no_soil_slope <- lmer(log_accel ~ log_distance + soil + Richter +
(log_distance | Quake), data = data, REML = FALSE)
LRT_soil <- 2 * (logLik(fit_full) - logLik(fit_no_soil_slope))
LRT_soil_value <- as.numeric(LRT_soil)
p_value_soil <- 0.5 * (1 - pchisq(LRT_soil_value, df = 2)) +
0.5 * (1 - pchisq(LRT_soil_value, df = 3))
cat("LRT Statistic for Random Slope of Soil:", LRT_soil_value, "\n")
cat("p-value for Random Slope of Soil:", p_value_soil, "\n")
# Test for Random Slope of log_distance
fit_no_distance_slope <- lmer(log_accel ~ log_distance + soil + Richter +
(soil | Quake), data = data, REML = FALSE)
LRT_distance <- 2 * (logLik(fit_full) - logLik(fit_no_distance_slope))
LRT_distance_value <- as.numeric(LRT_distance)
p_value_distance <- 0.5 * (1 - pchisq(LRT_distance_value, df = 2)) +
0.5 * (1 - pchisq(LRT_distance_value, df = 3))
cat("LRT Statistic for Random Slope of log_distance:", LRT_distance_value, "\n")
cat("p-value for Random Slope of log_distance:", p_value_distance, "\n")
# Test for Fixed Effect of Soil
fit_no_soil_fixed <- lmer(log_accel ~ log_distance + Richter +
(log_distance + soil | Quake), data = data, REML = FALSE)
LRT_soil_fixed <- 2 * (logLik(fit_full) - logLik(fit_no_soil_fixed))
LRT_soil_fixed_value <- as.numeric(LRT_soil_fixed)
p_value_soil_fixed <- 1 - pchisq(LRT_soil_fixed_value, df = 1)
cat("LRT Statistic for Fixed Effect of Soil:", LRT_soil_fixed_value, "\n")
cat("p-value for Fixed Effect of Soil:", p_value_soil_fixed, "\n")
# Test for Fixed Effect of log_distance
fit_no_distance_fixed <- lmer(log_accel ~ soil + Richter +
(log_distance + soil | Quake), data = data, REML = FALSE)
LRT_distance_fixed <- 2 * (logLik(fit_full) - logLik(fit_no_distance_fixed))
LRT_distance_fixed_value <- as.numeric(LRT_distance_fixed)
p_value_distance_fixed <- 1 - pchisq(LRT_distance_fixed_value, df = 1)
cat("LRT Statistic for Fixed Effect of log_distance:", LRT_distance_fixed_value, "\n")
cat("p-value for Fixed Effect of log_distance:", p_value_distance_fixed, "\n")
# Test for Fixed Effect of Richter
fit_no_richter_fixed <- lmer(log_accel ~ log_distance + soil +
(log_distance + soil | Quake), data = data, REML = FALSE)
LRT_richter_fixed <- 2 * (logLik(fit_full) - logLik(fit_no_richter_fixed))
LRT_richter_fixed_value <- as.numeric(LRT_richter_fixed)
p_value_richter_fixed <- 1 - pchisq(LRT_richter_fixed_value, df = 1)
cat("LRT Statistic for Fixed Effect of Richter:", LRT_richter_fixed_value, "\n")
cat("p-value for Fixed Effect of Richter:", p_value_richter_fixed, "\n")
m <- 20
n <- 20
beta_0 <- 3
beta_1 <- 6
beta_2 <- 9
sigma2 <- 2
psi0_2 <- 1
num_simulations <- 1000
lrt_statistics <- numeric(num_simulations)
p_values <- numeric(num_simulations)
set.seed(111)
for (sim in 1:num_simulations) {
w_j <- rnorm(m)
data <- data.frame(y = numeric(m * n),
x = numeric(m * n),
w = numeric(m * n),
group = rep(1:m, each = n))
for (j in 1:m) {
x_i_j <- rnorm(n)
a_0_j <- rnorm(1, 0, sqrt(psi0_2))
for (i in 1:n) {
epsilon_i_j <- rnorm(1, 0, sqrt(sigma2))
y_i_j <- beta_0 + beta_1 * x_i_j[i] + beta_2 * w_j[j] + a_0_j + epsilon_i_j
row_index <- (j - 1) * n + i
data$y[row_index] <- y_i_j
data$x[row_index] <- x_i_j[i]
data$w[row_index] <- w_j[j]
}
}
full_model <- lmer(y ~ x + w + (1 + x | group), data = data, REML = FALSE)
restricted_model <- lmer(y ~ x + w + (1 | group), data = data, REML = FALSE)
lrt <- 2 * (logLik(full_model) - logLik(restricted_model))
lrt_statistics[sim] <- as.numeric(lrt)
p_value <- 0.5 * pchisq(as.numeric(lrt), df = 1, lower.tail = FALSE) +
0.5 * pchisq(as.numeric(lrt), df = 2, lower.tail = FALSE)
p_values[sim] <- p_value
}
lrt_values <- seq(0, 10, length.out = 1000)
pdf_mixture <- 0.5 * dchisq(lrt_values, df = 1) + 0.5 * dchisq(lrt_values, df = 2)
data <- data.frame(LRT = lrt_values, Density = pdf_mixture)
mpar()
hist(lrt_statistics, col="lightblue", prob=TRUE, xlab="lambda", nclass=15)
xs <- seq(0, 10, length=100)
lines(xs, 0.5 * dchisq(xs, df=1) + 0.5 * dchisq(xs, df=2), col="red")
# Plot histogram of p-values
ggplot(data.frame(PValue = p_values), aes(x = PValue)) +
geom_histogram(bins = 20, color = "black", fill = "green", alpha = 0.7) +
ggtitle("Histogram of P-values") +
xlab("P-value") +
ylab("Frequency")
m <- 100
n <- 20
beta_0 <- 3
beta_1 <- 6
beta_2 <- 9
sigma2 <- 2
psi0_2 <- 1
num_simulations <- 1000
lrt_statistics <- numeric(num_simulations)
p_values <- numeric(num_simulations)
set.seed(111)
for (sim in 1:num_simulations) {
w_j <- rnorm(m)
data <- data.frame(y = numeric(m * n),
x = numeric(m * n),
w = numeric(m * n),
group = rep(1:m, each = n))
for (j in 1:m) {
x_i_j <- rnorm(n)
a_0_j <- rnorm(1, 0, sqrt(psi0_2))
for (i in 1:n) {
epsilon_i_j <- rnorm(1, 0, sqrt(sigma2))
y_i_j <- beta_0 + beta_1 * x_i_j[i] + beta_2 * w_j[j] + a_0_j + epsilon_i_j
row_index <- (j - 1) * n + i
data$y[row_index] <- y_i_j
data$x[row_index] <- x_i_j[i]
data$w[row_index] <- w_j[j]
}
}
full_model <- lmer(y ~ x + w + (1 + x | group), data = data, REML = FALSE)
restricted_model <- lmer(y ~ x + w + (1 | group), data = data, REML = FALSE)
lrt <- 2 * (logLik(full_model) - logLik(restricted_model))
lrt_statistics[sim] <- as.numeric(lrt)
p_value <- 0.5 * pchisq(as.numeric(lrt), df = 1, lower.tail = FALSE) +
0.5 * pchisq(as.numeric(lrt), df = 2, lower.tail = FALSE)
p_values[sim] <- p_value
}
lrt_values <- seq(0, 10, length.out = 1000)
pdf_mixture <- 0.5 * dchisq(lrt_values, df = 1) + 0.5 * dchisq(lrt_values, df = 2)
data <- data.frame(LRT = lrt_values, Density = pdf_mixture)
mpar()
hist(lrt_statistics, col="lightblue", prob=TRUE, xlab="lambda", nclass=15)
xs <- seq(0, 10, length=100)
lines(xs, 0.5 * dchisq(xs, df=1) + 0.5 * dchisq(xs, df=2), col="red")
# Plot histogram of p-values
ggplot(data.frame(PValue = p_values), aes(x = PValue)) +
geom_histogram(bins = 20, color = "black", fill = "green", alpha = 0.7) +
ggtitle("Histogram of P-values") +
xlab("P-value") +
ylab("Frequency")
m <- 500
n <- 20
beta_0 <- 3
beta_1 <- 6
beta_2 <- 9
sigma2 <- 2
psi0_2 <- 1
num_simulations <- 1000
lrt_statistics <- numeric(num_simulations)
p_values <- numeric(num_simulations)
set.seed(111)
for (sim in 1:num_simulations) {
w_j <- rnorm(m)
data <- data.frame(y = numeric(m * n),
x = numeric(m * n),
w = numeric(m * n),
group = rep(1:m, each = n))
for (j in 1:m) {
x_i_j <- rnorm(n)
a_0_j <- rnorm(1, 0, sqrt(psi0_2))
for (i in 1:n) {
epsilon_i_j <- rnorm(1, 0, sqrt(sigma2))
y_i_j <- beta_0 + beta_1 * x_i_j[i] + beta_2 * w_j[j] + a_0_j + epsilon_i_j
row_index <- (j - 1) * n + i
data$y[row_index] <- y_i_j
data$x[row_index] <- x_i_j[i]
data$w[row_index] <- w_j[j]
}
}
full_model <- lmer(y ~ x + w + (1 + x | group), data = data, REML = FALSE)
restricted_model <- lmer(y ~ x + w + (1 | group), data = data, REML = FALSE)
lrt <- 2 * (logLik(full_model) - logLik(restricted_model))
lrt_statistics[sim] <- as.numeric(lrt)
p_value <- 0.5 * pchisq(as.numeric(lrt), df = 1, lower.tail = FALSE) +
0.5 * pchisq(as.numeric(lrt), df = 2, lower.tail = FALSE)
p_values[sim] <- p_value
}
lrt_values <- seq(0, 10, length.out = 1000)
pdf_mixture <- 0.5 * dchisq(lrt_values, df = 1) + 0.5 * dchisq(lrt_values, df = 2)
data <- data.frame(LRT = lrt_values, Density = pdf_mixture)
mpar()
hist(lrt_statistics, col="lightblue", prob=TRUE, xlab="lambda", nclass=15)
xs <- seq(0, 10, length=100)
lines(xs, 0.5 * dchisq(xs, df=1) + 0.5 * dchisq(xs, df=2), col="red")
# Plot histogram of p-values
ggplot(data.frame(PValue = p_values), aes(x = PValue)) +
geom_histogram(bins = 20, color = "black", fill = "green", alpha = 0.7) +
ggtitle("Histogram of P-values") +
xlab("P-value") +
ylab("Frequency")
m <- 500
n <- 20
beta_0 <- 1
beta_1 <- 1
beta_2 <- 1
sigma2 <- 1
psi0_2 <- 1
num_simulations <- 1000
lrt_statistics <- numeric(num_simulations)
p_values <- numeric(num_simulations)
set.seed(111)
for (sim in 1:num_simulations) {
w_j <- rnorm(m)
data <- data.frame(y = numeric(m * n),
x = numeric(m * n),
w = numeric(m * n),
group = rep(1:m, each = n))
for (j in 1:m) {
x_i_j <- rnorm(n)
a_0_j <- rnorm(1, 0, sqrt(psi0_2))
for (i in 1:n) {
epsilon_i_j <- rnorm(1, 0, sqrt(sigma2))
y_i_j <- beta_0 + beta_1 * x_i_j[i] + beta_2 * w_j[j] + a_0_j + epsilon_i_j
row_index <- (j - 1) * n + i
data$y[row_index] <- y_i_j
data$x[row_index] <- x_i_j[i]
data$w[row_index] <- w_j[j]
}
}
full_model <- lmer(y ~ x + w + (1 + x | group), data = data, REML = FALSE)
restricted_model <- lmer(y ~ x + w + (1 | group), data = data, REML = FALSE)
lrt <- 2 * (logLik(full_model) - logLik(restricted_model))
lrt_statistics[sim] <- as.numeric(lrt)
p_value <- 0.5 * pchisq(as.numeric(lrt), df = 1, lower.tail = FALSE) +
0.5 * pchisq(as.numeric(lrt), df = 2, lower.tail = FALSE)
p_values[sim] <- p_value
}
lrt_values <- seq(0, 10, length.out = 1000)
pdf_mixture <- 0.5 * dchisq(lrt_values, df = 1) + 0.5 * dchisq(lrt_values, df = 2)
data <- data.frame(LRT = lrt_values, Density = pdf_mixture)
mpar()
hist(lrt_statistics, col="lightblue", prob=TRUE, xlab="lambda", nclass=15)
xs <- seq(0, 10, length=100)
lines(xs, 0.5 * dchisq(xs, df=1) + 0.5 * dchisq(xs, df=2), col="red")
# Plot histogram of p-values
ggplot(data.frame(PValue = p_values), aes(x = PValue)) +
geom_histogram(bins = 20, color = "black", fill = "green", alpha = 0.7) +
ggtitle("Histogram of P-values") +
xlab("P-value") +
ylab("Frequency")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
mpar<-function(...){par(mar=c(3,3,1,1),mgp=c(2,.75,0),tck=-.025,...)}
library(lme4)
library(ggplot2)
m <- 20
n <- 20
beta_0 <- 1
beta_1 <- 1
beta_2 <- 1
sigma2 <- 1
psi0_2 <- 1
num_simulations <- 1000
lrt_statistics <- numeric(num_simulations)
p_values <- numeric(num_simulations)
set.seed(111)
for (sim in 1:num_simulations) {
w_j <- rnorm(m)
data <- data.frame(y = numeric(m * n),
x = numeric(m * n),
w = numeric(m * n),
group = rep(1:m, each = n))
for (j in 1:m) {
x_i_j <- rnorm(n)
a_0_j <- rnorm(1, 0, sqrt(psi0_2))
for (i in 1:n) {
epsilon_i_j <- rnorm(1, 0, sqrt(sigma2))
y_i_j <- beta_0 + beta_1 * x_i_j[i] + beta_2 * w_j[j] + a_0_j + epsilon_i_j
row_index <- (j - 1) * n + i
data$y[row_index] <- y_i_j
data$x[row_index] <- x_i_j[i]
data$w[row_index] <- w_j[j]
}
}
full_model <- lmer(y ~ x + w + (1 + x | group), data = data, REML = FALSE)
restricted_model <- lmer(y ~ x + w + (1 | group), data = data, REML = FALSE)
lrt <- 2 * (logLik(full_model) - logLik(restricted_model))
lrt_statistics[sim] <- as.numeric(lrt)
p_value <- 0.5 * pchisq(as.numeric(lrt), df = 1, lower.tail = FALSE) +
0.5 * pchisq(as.numeric(lrt), df = 2, lower.tail = FALSE)
p_values[sim] <- p_value
}
lrt_values <- seq(0, 10, length.out = 1000)
pdf_mixture <- 0.5 * dchisq(lrt_values, df = 1) + 0.5 * dchisq(lrt_values, df = 2)
data <- data.frame(LRT = lrt_values, Density = pdf_mixture)
mpar()
hist(lrt_statistics, col="lightblue", prob=TRUE, xlab="lambda", nclass=15)
xs <- seq(0, 10, length=100)
lines(xs, 0.5 * dchisq(xs, df=1) + 0.5 * dchisq(xs, df=2), col="red")
# Plot histogram of p-values
ggplot(data.frame(PValue = p_values), aes(x = PValue)) +
geom_histogram(bins = 20, color = "black", fill = "green", alpha = 0.7) +
ggtitle("Histogram of P-values") +
xlab("P-value") +
ylab("Frequency")
m <- 20
n <- 20
beta_0 <- 3
beta_1 <- 6
beta_2 <- 9
sigma2 <- 2
psi0_2 <- 1
num_simulations <- 1000
lrt_statistics <- numeric(num_simulations)
p_values <- numeric(num_simulations)
set.seed(111)
for (sim in 1:num_simulations) {
w_j <- rnorm(m)
data <- data.frame(y = numeric(m * n),
x = numeric(m * n),
w = numeric(m * n),
group = rep(1:m, each = n))
for (j in 1:m) {
x_i_j <- rnorm(n)
a_0_j <- rnorm(1, 0, sqrt(psi0_2))
for (i in 1:n) {
epsilon_i_j <- rnorm(1, 0, sqrt(sigma2))
y_i_j <- beta_0 + beta_1 * x_i_j[i] + beta_2 * w_j[j] + a_0_j + epsilon_i_j
row_index <- (j - 1) * n + i
data$y[row_index] <- y_i_j
data$x[row_index] <- x_i_j[i]
data$w[row_index] <- w_j[j]
}
}
full_model <- lmer(y ~ x + w + (1 + x | group), data = data, REML = FALSE)
restricted_model <- lmer(y ~ x + w + (1 | group), data = data, REML = FALSE)
lrt <- 2 * (logLik(full_model) - logLik(restricted_model))
lrt_statistics[sim] <- as.numeric(lrt)
p_value <- 0.5 * pchisq(as.numeric(lrt), df = 1, lower.tail = FALSE) +
0.5 * pchisq(as.numeric(lrt), df = 2, lower.tail = FALSE)
p_values[sim] <- p_value
}
lrt_values <- seq(0, 10, length.out = 1000)
pdf_mixture <- 0.5 * dchisq(lrt_values, df = 1) + 0.5 * dchisq(lrt_values, df = 2)
data <- data.frame(LRT = lrt_values, Density = pdf_mixture)
mpar()
hist(lrt_statistics, col="lightblue", prob=TRUE, xlab="lambda", nclass=15)
xs <- seq(0, 10, length=100)
lines(xs, 0.5 * dchisq(xs, df=1) + 0.5 * dchisq(xs, df=2), col="red")
# Plot histogram of p-values
ggplot(data.frame(PValue = p_values), aes(x = PValue)) +
geom_histogram(bins = 20, color = "black", fill = "green", alpha = 0.7) +
ggtitle("Histogram of P-values") +
xlab("P-value") +
ylab("Frequency")
m <- 500
n <- 20
beta_0 <- 1
beta_1 <- 1
beta_2 <- 1
sigma2 <- 1
psi0_2 <- 1
num_simulations <- 1000
lrt_statistics <- numeric(num_simulations)
p_values <- numeric(num_simulations)
set.seed(111)
for (sim in 1:num_simulations) {
w_j <- rnorm(m)
data <- data.frame(y = numeric(m * n),
x = numeric(m * n),
w = numeric(m * n),
group = rep(1:m, each = n))
for (j in 1:m) {
x_i_j <- rnorm(n)
a_0_j <- rnorm(1, 0, sqrt(psi0_2))
for (i in 1:n) {
epsilon_i_j <- rnorm(1, 0, sqrt(sigma2))
y_i_j <- beta_0 + beta_1 * x_i_j[i] + beta_2 * w_j[j] + a_0_j + epsilon_i_j
row_index <- (j - 1) * n + i
data$y[row_index] <- y_i_j
data$x[row_index] <- x_i_j[i]
data$w[row_index] <- w_j[j]
}
}
full_model <- lmer(y ~ x + w + (1 + x | group), data = data, REML = FALSE)
restricted_model <- lmer(y ~ x + w + (1 | group), data = data, REML = FALSE)
lrt <- 2 * (logLik(full_model) - logLik(restricted_model))
lrt_statistics[sim] <- as.numeric(lrt)
p_value <- 0.5 * pchisq(as.numeric(lrt), df = 1, lower.tail = FALSE) +
0.5 * pchisq(as.numeric(lrt), df = 2, lower.tail = FALSE)
p_values[sim] <- p_value
}
